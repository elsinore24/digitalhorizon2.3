/* src/components/GameUIIndicators/NeuralStabilityIndicator.module.scss */
@use "sass:math"; // Import Sass math module if needed for calculations

.neuralIndicator {
  /* Specific overrides or additions for Neural Stability */
  /* Example: Slightly different glow if needed */
  /* box-shadow: 0 0 10px var(--neural-start-color), inset 0 0 5px rgba(0, 255, 255, 0.1); */
}

.segmentedBar {
  display: flex;
  width: 100%;
  height: 18px; /* Match base height or adjust */
  background-color: rgba(0, 0, 0, 0.4); /* Darker background for segments */
  border-radius: 3px;
  overflow: hidden;
  border: 1px solid rgba(0, 150, 150, 0.3);
  padding: 1px; /* Small padding to see segment gaps */
  gap: 1px; /* Gap between segments */
}

.segment {
  flex-grow: 1; /* Each segment takes equal space */
  height: 100%;
  border-radius: 1px; /* Slightly rounded segments */
  transition: background-color 0.5s ease-out, opacity 0.5s ease-out; /* Smooth transition */
  position: relative; /* For potential pseudo-elements */
}

.empty {
  background-color: rgba(100, 150, 150, 0.15); /* Dimmed color for empty segments */
  opacity: 0.6;
}

.filled {
  background-image: linear-gradient(to right, var(--neural-start-color), var(--neural-end-color));
  /* Apply gradient across the entire filled section - tricky with individual segments.
     A simpler approach is a solid color or applying gradient per segment which might look blocky.
     Let's try applying the gradient based on the segment's position. */
  background-size: 200% 100%; /* Make gradient span wider than segment */
  background-position: calc( (var(--segment-index, 0) / var(--filled-segments, 1)) * -100% ) 0; /* Shift gradient based on index */
  opacity: 1;
  animation: pulseFilledNeural 2s infinite ease-in-out;
  box-shadow: inset 0 0 3px rgba(255, 255, 255, 0.2); /* Inner highlight */

  /* Add a subtle glow effect to filled segments */
   &::after {
     content: '';
     position: absolute;
     top: -1px; left: -1px; right: -1px; bottom: -1px;
     background: linear-gradient(to right, var(--neural-start-color), var(--neural-end-color));
     filter: blur(2px);
     opacity: 0.5;
     z-index: -1;
     border-radius: 2px;
   }
}

/* Optional: Continuous fill approach (if segments are removed or overlaid) */
/*
.neuralFill {
  background: linear-gradient(to right, var(--neural-start-color), var(--neural-end-color));
  animation: pulse 2s infinite ease-in-out; // Use shared pulse or a specific one
}
*/

@keyframes pulseFilledNeural {
  0% { opacity: 0.85; filter: brightness(0.9); }
  50% { opacity: 1; filter: brightness(1.1); }
  100% { opacity: 0.85; filter: brightness(0.9); }
}